name: Continuous Deployment

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t volttechafrica/flexdeskbackend:latest .

      - name: Push Docker image to Docker Hub
        run: docker push volttechafrica/flexdeskbackend:latest

      - name: Generate .env content
        id: dotenv
        run: |
          cat <<EOF > .env
          DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_USER=${{ secrets.REDIS_USER }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }}
          DATADOG_APP_KEY=${{ secrets.DATADOG_APP_KEY }}
          DD_AGENT_PORT=${{ secrets.DD_AGENT_PORT }}
          PORT=8000
          NODE_ENV=production
          NODE_NO_WARNINGS=1
          ENV=production
          EOF
          echo "DOTENV=$(base64 -w 0 .env)" >> $GITHUB_ENV

      - name: Base64 encode docker-compose.yaml
        run: |
          echo "DOCKER_COMPOSE=$(base64 -w 0 docker-compose.yaml)" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: af-south-1

      - name: Deploy via SSM
        run: |
          command_id=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying Flexdesk backend" \
            --parameters 'commands=[
              "mkdir -p /home/ubuntu/flexdeskBackend",
              "echo ${{ env.DOTENV }} | base64 -d > /home/ubuntu/flexdeskBackend/.env",
              "echo ${{ env.DOCKER_COMPOSE }} | base64 -d > /home/ubuntu/flexdeskBackend/docker-compose.yaml",
              "cd /home/ubuntu/flexdeskBackend",
              "sudo docker-compose pull",
              "sudo docker-compose down",
              "sudo docker-compose up -d",
              "docker ps | grep flexdesk-backend || { echo \"flexdesk-backend is NOT running\"; exit 1; }"
            ]' \
            --region af-south-1 \
            --query "Command.CommandId" \
            --output text)

          # Wait and check the command result
          sleep 50  # wait a few seconds before fetching status

          status=$(aws ssm list-command-invocations \
            --command-id "$command_id" \
            --details \
            --region af-south-1 \
            --query "CommandInvocations[0].Status" \
            --output text)

          echo "SSM Command Status: $status"

          if [ "$status" != "Success" ]; then
            echo "‚ùå Deployment failed or container not running"
            exit 1
          fi
