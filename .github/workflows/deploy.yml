name: CI/CD Pipeline

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

jobs:
  # ------------------ CI JOB ------------------
  ci:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm install

      - name: Lint, test or type-check (optional)
        run: |
          echo "Add lint/test/build steps here"
          # npm run lint
          # npm run test

      - name: Create .env file
        run: |
          cat <<EOF > .env
          DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_USER=${{ secrets.REDIS_USER }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }}
          DATADOG_APP_KEY=${{ secrets.DATADOG_APP_KEY }}
          DD_AGENT_PORT=${{ secrets.DD_AGENT_PORT }}
          EOF

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          docker-compose --version
      - name: Start Docker Compose services for testing
        run: |
          cp .env .env.test
          docker-compose -f docker-compose.test.yaml up -d --build

      - name: Run health check
        run: |
          echo "Waiting for app to be healthy..."
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8000/api/v2/health || true)
              if [ "$STATUS" = "200" ]; then
                echo "App is healthy!"
                exit 0
              fi
              echo "Health check failed (status: $STATUS). Retrying in 5s..."
              sleep 5
            done
            echo "Service failed health check after 30 attempts."
            docker-compose logs
            exit 1

      - name: Shut down Docker Compose
        if: always()
        run: docker-compose -f docker-compose.test.yaml down --volumes --remove-orphans

  # ------------------ CD JOB ------------------
  cd:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Build Docker image
        run: docker build -t volttechafrica/flexdeskbackend:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: docker push volttechafrica/flexdeskbackend:latest

      - name: Generate .env file
        run: |
          cat <<EOF > .env
          DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION=${{ secrets.JWT_REFRESH_EXPIRATION }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_USER=${{ secrets.REDIS_USER }}
          EMAIL_USER=${{ secrets.EMAIL_USER }}
          EMAIL_HOST=${{ secrets.EMAIL_HOST }}
          EMAIL_PORT=${{ secrets.EMAIL_PORT }}
          EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          DATADOG_API_KEY=${{ secrets.DATADOG_API_KEY }}
          DATADOG_APP_KEY=${{ secrets.DATADOG_APP_KEY }}
          DD_AGENT_PORT=${{ secrets.DD_AGENT_PORT }}
          EOF

      - name: Encode .env file to base64
        id: env_base64
        run: |
          ENV_CONTENT=$(base64 .env | tr -d '\n')
          echo "ENV_CONTENT=$ENV_CONTENT" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: africa-west-1

      - name: Send .env & Deploy via SSM to EC2
        run: |
          aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Clone repo if missing, update .env and deploy Flexdesk app" \
            --parameters commands='
              cd /home/ubuntu
              if [ ! -d "flexdeskBackend" ]; then
                mkdir flexdeskBackend
                cd flexdeskBackend
                git clone https://github.com/VolttechAfrica/flexdeskv2.git .
              fi
              cd flexdeskBackend
              echo ${{ env.ENV_CONTENT }} | base64 -d > .env
              docker-compose pull
              docker-compose up -d --build
            ' \
            --output text
